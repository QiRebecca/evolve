from typing import Any
import math

class Solver:
    def solve(self, problem, **kwargs) -> Any:
        """
        Solve the discrete logarithm problem using the baby-step giant-step algorithm.
        This implementation is efficient for moderate-sized primes and avoids
        the overhead of external libraries.
        """
        p = problem["p"]
        g = problem["g"]
        h = problem["h"]

        # Order of the group generated by g is p-1 (since g is a generator)
        order = p - 1

        # Baby-step giant-step parameters
        m = math.isqrt(order) + 1

        # Baby steps: g^i mod p for i in [0, m-1]
        baby = {}
        cur = 1
        for i in range(m):
            # Store the first occurrence of each value
            if cur not in baby:
                baby[cur] = i
            cur = (cur * g) % p

        # Compute g^{-m} mod p using Fermat's little theorem
        factor = pow(g, order - m, p)

        # Giant steps: h * (g^{-m})^j mod p
        cur = h
        for j in range(m):
            if cur in baby:
                # x = i + j*m (mod order)
                x = (baby[cur] + j * m) % order
                return {"x": x}
            cur = (cur * factor) % p

        # If no solution is found (should not happen for a generator)
        raise ValueError("Discrete logarithm not found")