You’re an autonomous programmer tasked with solving a specific problem.
You are to use the commands defined below to accomplish this task.
Apart from the default Python packages, you have access to the following
additional packages:
- cryptography
- cvxpy
- cython
- dask
- diffrax
- ecos
- faiss-cpu
- hdbscan
- highspy
- jax
- networkx
- numba
- numpy
- ortools
- pandas
- pot
- pulp
- pyomo
- python-sat
- scikit-learn
- scipy
- sympy
- torch
YOUR TASK:
Your objective is to define a class named ‘Solver‘ in ‘solver.py‘ with a
method:
‘‘’
class Solver:
def solve(self, problem, **kwargs) -> Any:
"""Your implementation goes here."""
...
‘‘’
IMPORTANT: Compilation time of your init function will not count towards
your function’s runtime.

This ‘solve‘ function will be the entrypoint called by the evaluation
harness. Strive to align your class and method implementation as
closely as possible with the desired performance criteria.
For each instance, your function can run for at most 10x the baseline
runtime for that instance. Strive to have your implementation run as
fast as possible, while returning the same output as the baseline function (for the same given input). Be creative and optimize your
approach!

**GOALS:**
Your primary objective is to optimize the ‘solve‘ function to run as as
fast as possible, while returning the optimal solution.

You will receive better scores the quicker your solution runs, and you
will be penalized for exceeding the time limit or returning nonoptimal solutions.
Below you find the description of the task you will have to solve. Read
it carefully and understand what the problem is and what your solver
should do.

GeneralizedEigenvaluesComplex Task:

Given two matrices A and B, where:
  - A and B are arbitrary real n x n matrices,
the task is to solve the generalized eigenvalue problem:

    A · x = λ B · x

The eigenvalues are not necessarily real; they may be complex.
The goal is to compute the approximated eigenvalues and return them sorted in descending order.
The sorting order is defined as follows: first by the real part (in descending order), then by the imaginary part (in descending order).
A valid solution is a list of n numbers (complex or real) sorted according to this ordering.

Input: Two matrices A and B represented as arrays of real numbers.
  - A and B are arbitrary (not necessarily symmetric).

Example input:
A = [
    [1.0, 2.0],
    [3.0, 4.0]
]
B = [
    [2.0, 0.5],
    [1.5, 3.0]
]

Output: A list of approximated eigenvalues (which may be complex) sorted in descending order.

Example output:
[(5.2+0.3j), (0.8-0.3j)]

Category: matrix_operations

Here is the baseline which you will be graded against. Your task is to
write a function that produces the same output, in less time.

def solve(self, problem: tuple[NDArray, NDArray]) -> list[complex]:
        """
        Solve the generalized eigenvalue problem for the given matrices A and B.

        The problem is defined as: A · x = λ B · x.
        For better numerical stability, we first scale B, then solve the problem.

        The solution is a list of eigenvalues sorted in descending order, where the sorting order
        is defined as: first by the real part (descending), then by the imaginary part (descending).

        :param problem: Tuple (A, B) where A and B are n x n real matrices.
        :return: List of eigenvalues (complex numbers) sorted in descending order.
        """
        A, B = problem
        logging.debug("Starting generalized eigenvalue computation using scipy.linalg.eig.")

        # Scale matrices for better numerical stability.
        scale_B = np.sqrt(np.linalg.norm(B))
        B_scaled = B / scale_B
        A_scaled = A / scale_B

        # Solve scaled problem.
        eigenvalues, _ = la.eig(A_scaled, B_scaled)

        # Sort eigenvalues: descending order by real part, then by imaginary part.
        solution = sorted(eigenvalues, key=lambda x: (-x.real, -x.imag))
        logging.debug(f"Computed generalized eigenvalues (sorted in descending order): {solution}")
        return solution

This function will be used to check if your solution is valid for a given
problem. If it returns False, it means the solution is invalid:

def is_solution(self, problem: tuple[NDArray, NDArray], solution: list[complex]) -> bool:
        """
        Check if the generalized eigenvalue solution is valid and optimal.

        Checks performed:
          1. The solution is a list of complex numbers with length n.
          2. Each eigenvalue is finite.
          3. Eigenvalues are sorted in descending order by re-sorting with the same key
             and confirming they match the user-provided list.
          4. For each eigenvalue λ, check that (A - λ B) is nearly singular. We compute the
             smallest singular value of (A - λ B). The relative error is:
                 min_sigma / (||A|| + ||B|| + ε),
             which must be below a specified tolerance.

        :param problem: Tuple (A, B) where A and B are n x n real matrices.
        :param solution: List of eigenvalues (complex numbers) purportedly sorted in descending order.
        :return: True if the solution is valid and optimal; otherwise, False.
        """
        A, B = problem
        n = A.shape[0]
        tol = 1e-6
        epsilon = 1e-12

        # 1. Check that solution is a list of length n.
        if not isinstance(solution, list):
            logging.error("Solution is not a list.")
            return False
        if len(solution) != n:
            logging.error(f"Solution length {len(solution)} does not match expected size {n}.")
            return False

        # 2. Check that each eigenvalue is a finite complex number.
        for i, eig in enumerate(solution):
            try:
                lam = complex(eig)
            except Exception as e:
                logging.error(f"Eigenvalue at index {i} cannot be converted to complex: {e}")
                return False
            if not (np.isfinite(lam.real) and np.isfinite(lam.imag)):
                logging.error(f"Eigenvalue at index {i} is not finite: {lam}")
                return False

        # 3. Verify the user-provided list is sorted in descending order
        #    by re-sorting with the exact same key.
        sorted_solution = sorted(solution, key=lambda x: (-x.real, -x.imag))

        # Compare element by element to ensure they match (within a small tolerance).
        for cand, sorted_val in zip(solution, sorted_solution):
            # If they differ significantly, the user's solution isn't sorted properly.
            if abs(cand - sorted_val) > 1e-12:
                logging.error("Eigenvalues are not sorted in descending order.")
                return False

        # 4. For each eigenvalue, check if A - λ B is nearly singular.
        norm_A = np.linalg.norm(A)
        norm_B = np.linalg.norm(B)

        for i, lam in enumerate(solution):
            residual_matrix = A - lam * B
            # Compute smallest singular value of (A - λ B).
            try:
                singular_values = np.linalg.svd(residual_matrix, compute_uv=False)
            except Exception as e:
                logging.error(f"Error computing SVD for eigenvalue index {i}: {e}")
                return False
            min_sv = np.min(np.abs(singular_values))

            # If (A - λ B) is truly singular, min_sv should be near zero.
            rel_error = min_sv / (norm_A + norm_B + epsilon)
            if rel_error > tol:
                logging.error(
                    f"Eigenvalue at index {i} has relative residual error {rel_error} "
                    f"which exceeds tolerance {tol}."
                )
                return False

        return True


-----------

for <task.xxx> please extract from the file directly

--------

the only output we need is solver.py, please let the model output this only in exact form mentioned in the prompt, and the solver should be putted in solver.py under output path with corresponding task name.
-----
ABSOLUTE OUTPUT FORMAT (STRICT):

You MUST wrap the **entire and only** contents of solver.py between the
following two sentinel lines, with no extra characters, spaces or text
before/after them:

<<<SOLVER_PY_START>>>
<solver.py contents ONLY — no backticks, no explanations>
<<<SOLVER_PY_END>>>

Rules:
- Do NOT use Markdown code fences (no ```).
- Do NOT print anything outside <<<SOLVER_PY_START>>> … <<<SOLVER_PY_END>>>.
- The code must contain:
    - `from typing import Any`
    - `class Solver:` with `def solve(self, problem, **kwargs) -> Any:`

CRITICAL:
- The file must END with the exact sentinel line <<<SOLVER_PY_END>>>.
- Never print anything after <<<SOLVER_PY_END>>>.
- Do not include explanations, logs, or markdown fences anywhere.
